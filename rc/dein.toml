[[plugins]]
repo = 'Shougo/dein.vim'

# git clone 後、実行すべきコマンドがある場合はこんな感じ
[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
    call dein#add('Shougo/vimproc', {'build': 'make'})
'''
hook_add = '''
    if has('mac')
      let g:vimproc_dll_path = '$HOME/.vim/utils/dein/repos/github.com/Shougo/vimproc.vim/lib/vimproc_mac.so'
    elseif has('unix')
      let g:vimproc_dll_path = '$HOME/.vim/utils/dein/repos/github.com/Shougo/vimproc.vim/lib/vimproc_linux64.so'
    elseif has('win32')
      let g:vimproc_dll_path = $HOME . '.vim/utils/dein/repos/github.com/Shougo/vimproc.vim/vimproc_win32.dll'
    elseif has('linux')
      let g:vimproc_dll_path = $HOME . '.vim/utils/dein/repos/github.com/Shougo/vimproc.vim/vimproc_win64.dll'
    endif
'''

[[plugins]]
repo = 'Shougo/neocomplete.vim'
on_i = 1
hook_add = '''
    "Note: This option must set it in .vimrc(_vimrc).    NOT IN .gvimrc(_gvimrc)!
    " Disable AutoComplPop.
    let g:acp_enableAtStartup = 0
    " Use neocomplete.
    let g:neocomplete#enable_at_startup = 1
    " Use smartcase.
    let g:neocomplete#enable_smart_case = 1
    " Set minimum syntax keyword length.
    let g:neocomplete#sources#syntax#min_keyword_length = 3
    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
    let g:neocomplete#use_vimproc = 1

    " Define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $HOME.'/.vimshell_hist',
        \ 'scheme' : $HOME.'/.gosh_completions',
        \ 'dict' : $HOME.'/.vim/dic'
        \ }

    " Define keyword.
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " Plugin key-mappings.
    inoremap <expr><C-g>     neocomplete#undo_completion()
    inoremap <expr><C-l>     neocomplete#complete_common_string()

    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
        return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
        " For no inserting <CR> key.
        "return pumvisible() ? "\<C-y>" : "\<CR>"
    endfunction
    " <TAB>: completion.
    inoremap <expr><TAB>    pumvisible() ? "\<C-n>" : "\<TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    " Close popup by <Space>.
    "inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

    " AutoComplPop like behavior.
    "let g:neocomplete#enable_auto_select = 1

    " Shell like behavior(not recommended).
    "set completeopt+=longest
    "let g:neocomplete#enable_auto_select = 1
    "let g:neocomplete#disable_auto_complete = 1
    "inoremap <expr><TAB>    pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

    " Enable omni completion.
    autocmd MyAutoCmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd MyAutoCmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd MyAutoCmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    " autocmd MyAutoCmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd MyAutoCmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
        let g:neocomplete#sources#omni#input_patterns = {}
    endif
    "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
    let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

    " For perlomni.vim setting.
    " https://github.com/c9s/perlomni.vim
    let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
'''  

# colorscheme
[[plugins]]
repo = 'tomasr/molokai'
[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
hi Comment ctermfg=cyan guifg=#00b5ff
hi Folded ctermfg=cyan ctermbg=6 guifg=#00b5ff guibg=#001015
'''
 
[[plugins]]
repo = "thinca/vim-template"
hook_add = '''
    autocmd MyAutoCmd User plugin-template-loaded call s:template_keywords()
    function! s:template_keywords()
        silent! %s/<+DATE+>/\=strftime('%Y-%m-%d')/g
        silent! %s/<+FILENAME+>/\=expand('%:r')/g
    endfunction
    " テンプレート中に含まれる'<+CURSOR+>'にカーソルを移動
    autocmd MyAutoCmd User plugin-template-loaded
       \if search('<+CURSOR+>')
       \ |   silent! execute 'normal! "_da>'
       \ | endif
'''
[[plugins]]
repo = "tpope/vim-fugitive"
hook_add = '''
    " Statuslineの設定
    set laststatus=2
    set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ \[ENC=%{&fileencoding}]%P 
    set statusline+=%{fugitive#statusline()}  " Gitのブランチ名を表示
'''

[[plugins]]
repo = 'tpope/vim-surround'
#
#[[plugins]]
#repo = 'vim-scripts/Align'
#[[plugins]]
#repo = 'Glench/Vim-Jinja2-Syntax'

[[plugins]]
repo = 'vim-scripts/YankRing.vim'

[[plugins]]
repo = 'Shougo/vimshell.vim'


[[plugins]]
repo = 'vim-scripts/gnuplot-syntax-highlighting'

[[plugins]]
repo = 'https://github.com/Glench/Vim-Jinja2-Syntax'


[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]] # ウインドウのリサイズ
repo = 'simeji/winresizer'

[[plugins]]
repo = 'scrooloose/nerdtree'

[[plugins]]
repo = 'kakkyz81/evervim'

[[plugins]]
repo = 'tyru/open-browser.vim'
 
[[plugins]]
repo = 'daisuzu/translategoogle.vim'
hook_add = '''
    let g:translategoogle_default_sl = 'ja'
    let g:translategoogle_default_tl = 'en'
'''
[[plugins]]
repo = "Konfekt/FastFold"
hook_add = '''
    nmap zuz <Plug>(FastFoldUpdate)
    let g:fastfold_savehook = 1
    let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C']
    let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']
'''

[[plugins]]
repo = "Shougo/unite.vim"
on_cmd = ['Unite', "UniteWithBufferDir"]

[[plugins]]
repo = "Shougo/neosnippet-snippets"
[[plugins]]
repo = "honza/vim-snippets"
 
[[plugins]]
repo = "Shougo/neosnippet.vim"
depends = ['neosnippet-snippets', 'vim-snippets']
on_i = 1
hook_post_source = '''
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior.
    " imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
    " smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''
hook_source = '''
    " For snippet_complete marker.
    if has('conceal')
      set conceallevel=2 concealcursor=i
    endif
    let g:neosnippet#enable_snipmate_compatibility = 1
    let s:github_repo = expand('~/.vim/utils/dein/repos/github.com')
    let g:neosnippet#snippets_directory=[s:github_repo . '/Shougo/neosnippet-snippets/neosnippets/']
    let g:neosnippet#snippets_directory+=[s:github_repo . '/honza/vim-snippets/snippets/']
    let s:ymatz_repo = s:github_repo . '/ymatz/vim-latex-completion'
    if !isdirectory(s:ymatz_repo)
        echo isdirectory(s:ymatz_repo)
        execute '!git clone https://github.com/ymatz/vim-latex-completion.git' s:ymatz_repo
    endif

    set dictionary+=$HOME/.vim/utils/dein/repos/github.com/ymatz/vim-latex-completion/tex.dict
    let g:neosnippet#snippets_directory+=[s:ymatz_repo]
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    let g:quickrun_config = {'_': {
                             \       'runner': 'vimproc',
                             \},
                             \}
    nmap <Leader>r <Plug>(quickrun)
    nmap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''

[[plugins]]
repo = "davidhalter/jedi-vim"
on_ft = ["python", "python3", "djangohtml", "jinja"]
on_source = "lambdalisue/vim-pyenv"
hook_post_update = '''
    if dein#util#_is_windows()
        let cmd = 'pip install jedi'
    elseif dein#util#_is_unix()
        let cmd = 'pip install jedi'
    else
        let cmd = 'pip install jedi'
    endif
 '''
hook_source  = '''
    autocmd FileType python setlocal completeopt-=preview
    autocmd FileType python setlocal omnifunc=jedi#completions
    let g:jedi#completions_enabled = 0
    " jediにvimの設定を任せると'completeopt+=preview'するので
    " 自動設定機能をOFFにし手動で設定を行う
    let g:jedi#auto_vim_configuration=0
    " 補完の最初の項目が選択された状態だと使いにくいためオフにする
    let g:jedi#popup_select_first=0
    " quickrunと被るため大文字に変更
    let g:jedi#rename_command='<Leader>R'
    " gundoと被るため大文字に変更 (2013-06-24 10:00 追記）
    let g:jedi#goto_command='<Leader>G'
    let g:jedi#goto_assignments_command = "<C-g>"   " 変数の宣言場所へジャンプ（Ctrl + g)
    let g:jedi#goto_definitions_command = "<C-d>"   " クラス、関数定義にジャンプ（Gtrl + d）
    let g:jedi#documentation_command = "<C-k>"      " Pydocを表示（Ctrl + k）
    let g:jedi#completions_command = '<C-Space>'


    if !exists('g:neocomplete#force_omni_input_patterns')
            let g:neocomplete#force_omni_input_patterns = {}
    endif
    " let g:neocomplete#force_omni_input_patterns.python = '\h\w*\|[^. \t]\.\w*'
    "pyenv の補完を有効にする

    " PATHの自動更新関数
    " | 指定された path が $PATH に存在せず、ディレクトリとして存在している場合
    " | のみ $PATH に加える
    function! IncludePath(path)
        " define delimiter depends on platform
        if has('win16') || has('win32') || has('win64')
            let delimiter = ";"
        else
            let delimiter = ":"
        endif
        let pathlist = split($PATH, delimiter)
        if isdirectory(a:path) && index(pathlist, a:path) == -1
            let $PATH=a:path.delimiter.$PATH
        endif
    endfunction

    " ~/.pyenv/shims を $PATH に追加する
    " これを行わないとpythonが正しく検索されない
    IncludePath(expand("~/.pyenv/shims"))
'''

[[plugins]]
repo = "lambdalisue/vim-pyenv"
depends = "jedi-vim"
on_ft = ["python", "python3", "djangohtml", "jinja"]

[[plugins]]
repo = 'andviro/flake8-vim'
on_ft = ["python", "python3", "djangohtml", "jinja"]

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = ["python", "python3", "djangohtml", "jinja"]

[[plugins]]
repo = 'lervag/vimtex'
on_ft = ["tex"]
hook_add = '''
    let g:tex_flavor='latex'
    " clientserver error を無視する
    let g:vimtex_compiler_enable = 0
    let g:vimtex_compiler_latexmk = {'callback' : 0}
    " let g:vimtex_echo_ignore_wait = 1
    " filetype plugin on
    " filetype indent on
    " set shellslash
    " set grepprg=grep\ -nH\ $*
    " let g:tex_flavor='platex'
    " let g:Imap_UsePlaceHolders = 1
    " let g:Imap_DeleteEmptyPlaceHolders = 1
    " let g:Imap_StickyPlaceHolders = 0
    " let g:Tex_DefaultTargetFormat = 'pdf'
    " let g:Tex_MultipleCompileFormats='dvi,pdf'
    " let g:Tex_FormatDependency_pdf = 'dvi,pdf'
    " let g:Tex_FormatDependency_ps = 'dvi,ps'
    " let g:Tex_CompileRule_pdf = '/Library/TeX/texbin/ptex2pdf -u -l -ot "-synctex=1 -interaction=nonstopmode -file-line-error-style" $*'
    " let g:Tex_CompileRule_ps = '/Library/TeX/texbin/dvips -Ppdf -o $*.ps $*.dvi'
    " let g:Tex_CompileRule_dvi = '/Library/TeX/texbin/uplatex -synctex=1 -interaction=nonstopmode -file-line-error-style $*'
    " let g:Tex_BibtexFlavor = '/Library/TeX/texbin/upbibtex'
    " let g:Tex_MakeIndexFlavor = '/Library/TeX/texbin/upmendex $*.idx'
    " let g:Tex_UseEditorSettingInDVIViewer = 1
    let g:Tex_ViewRule_pdf = 'Skim'
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'lazywei/vim-matlab'
on_ft = 'matlab'

[[plugins]]
repo = 'ujihisa/neco-look'
on_ft = 'tex'
hook_add = '''
    if !exists('g:neocomplete#text_mode_filetypes')
        let g:neocomplete#text_mode_filetypes = {}
    endif
    let g:neocomplete#text_mode_filetypes = {
            \ 'rst': 1,
            \ 'markdown': 1,
            \ 'gitrebase': 1,
            \ 'gitcommit': 1,
            \ 'vcs-commit': 1,
            \ 'hybrid': 1,
            \ 'text': 1,
            \ 'help': 1,
            \ 'tex': 1,
            \ }
'''

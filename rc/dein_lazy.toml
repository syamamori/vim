[[plugins]]
repo = 'Shougo/neocomplete.vim'
on_i = 1
hook_add = '''
"Note: This option must set it in .vimrc(_vimrc).    NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
    \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
    return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
    " For no inserting <CR> key.
    "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>    pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>    pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd MyAutoCmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd MyAutoCmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd MyAutoCmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd MyAutoCmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd MyAutoCmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
'''

[[plugins]]
repo = "Shougo/unite.vim"
on_cmd = ['Unite', "UniteWithBufferDir"]

[[plugins]]
repo = "Shougo/neosnippet-snippets"

[[plugins]]
    repo = "Shougo/neosnippet.vim"
    depends = ['neosnippet-snippets']
    on_i = 1
    hook_add = '''
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior.
    imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)"
    \: pumvisible() ? "\<C-n>" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)"
    \: "\<TAB>"

    " For snippet_complete marker.
    if has('conceal')
      set conceallevel=2 concealcursor=i
    endif
    let g:neosnippet#snippets_directory=['~/.vim/utils/dein/repos/github/Shougo/neosnippet-snippets/neosnippets/']
    let g:neosnippet#snippets_directory+=['~/.vim/utils/dein/repos/github/honza/vim-snippets/snippets/']
'''

# [[plugins]]
# repo = "honza/vim-snippets.vim"
 

[[plugins]]
repo = "thinca/vim-quickrun"
on_map = [['n', '<Plug>(quickrun)']]
on_cmd = ['Quickrun']
on_post_source = 'nmap <Leader>r <Plug>(quickrun)'
on_post_source = '''
    let g:quickrun_config = {
        \ "_": {"runner": "remote/vimproc"},
        \ }
    let g:quickrun_config={'_': {'split': 'vertical'}}
'''

[[plugins]]
repo = "davidhalter/jedi-vim"
on_ft = ["python", "python3", "djangohtml", "jinja"]
# on_source = "vim-pyenv"
on_post_update = '''
    if dein#util#_is_windows()
        let cmd = 'pip install jedi'
    elseif dein#util#_is_unix()
        let cmd = 'pip install jedi'
    else
        let cmd = 'pip install jedi'
    endif
 '''
on_post_source = '''
     " jediにvimの設定を任せると'completeopt+=preview'するので
     " 自動設定機能をOFFにし手動で設定を行う
     let g:jedi#auto_vim_configuration = 0
     " 補完の最初の項目が選択された状態だと使いにくいためオフにする
     let g:jedi#popup_select_first = 0
     " quickrunと被るため大文字に変更
     let g:jedi#rename_command = '<Leader>R'
     " gundoと被るため大文字に変更 (2013-06-24 10:00 追記）
     let g:jedi#goto_command = '<Leader>G'
'''

# [[plugins]]
# repo = "lambdalisue/vim-pyenv"
# on_ft = ["python", "python3", "djangohtml", "jinja"]
# on_post_source = '''
#     let cmd = 'pip install jedi'
# '''
 
[[plugins]]
repo = 'andviro/flake8-vim'
on_ft = ["python", "python3", "djangohtml", "jinja"]

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = ["python", "python3", "djangohtml", "jinja"]

[[plugins]]
repo = 'lervag/vimtex'
on_ft = ["tex"]
# on_post_source = '''
#     filetype plugin on
#     filetype indent on
#     set shellslash
#     set grepprg=grep\ -nH\ $*
#     let g:tex_flavor='platex'
#     let g:Imap_UsePlaceHolders = 1
#     let g:Imap_DeleteEmptyPlaceHolders = 1
#     let g:Imap_StickyPlaceHolders = 0
#     let g:Tex_DefaultTargetFormat = 'pdf'
#     let g:Tex_MultipleCompileFormats='dvi,pdf'
#     let g:Tex_FormatDependency_pdf = 'dvi,pdf'
#     let g:Tex_FormatDependency_ps = 'dvi,ps'
#     let g:Tex_CompileRule_pdf = '/Library/TeX/texbin/ptex2pdf -u -l -ot "-synctex=1 -interaction=nonstopmode -file-line-error-style" $*'
#     let g:Tex_CompileRule_ps = '/Library/TeX/texbin/dvips -Ppdf -o $*.ps $*.dvi'
#     let g:Tex_CompileRule_dvi = '/Library/TeX/texbin/uplatex -synctex=1 -interaction=nonstopmode -file-line-error-style $*'
#     let g:Tex_BibtexFlavor = '/Library/TeX/texbin/upbibtex'
#     let g:Tex_MakeIndexFlavor = '/Library/TeX/texbin/upmendex $*.idx'
#     let g:Tex_UseEditorSettingInDVIViewer = 1
#     let g:Tex_ViewRule_pdf = 'Skim'
# '''

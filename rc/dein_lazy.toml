[[plugins]]
repo = "Shougo/unite.vim"
on_cmd = ['Unite', "UniteWithBufferDir"]

[[plugins]]
repo = "Shougo/neosnippet-snippets"
[[plugins]]
repo = "honza/vim-snippets"
 
[[plugins]]
repo = "Shougo/neosnippet.vim"
depends = ['neosnippet-snippets', 'vim-snippets']
on_i = 1
hook_post_source = '''
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior.
    " imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
    " smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''
hook_source = '''
    " For snippet_complete marker.
    if has('conceal')
      set conceallevel=2 concealcursor=i
    endif
    let g:neosnippet#enable_snipmate_compatibility = 1
    let s:github_repo = expand('~/.vim/utils/dein/repos/github.com')
    let g:neosnippet#snippets_directory=[s:github_repo . '/Shougo/neosnippet-snippets/neosnippets/']
    let g:neosnippet#snippets_directory+=[s:github_repo . '/honza/vim-snippets/snippets/']
    let s:ymatz_repo = s:github_repo . '/ymatz/vim-latex-completion'
    if !isdirectory(s:ymatz_repo)
        echo isdirectory(s:ymatz_repo)
        execute '!git clone https://github.com/ymatz/vim-latex-completion.git' s:ymatz_repo
    endif

    set dictionary+=$HOME/.vim/utils/dein/repos/github.com/ymatz/vim-latex-completion/tex.dict
    let g:neosnippet#snippets_directory+=[s:ymatz_repo]
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    let g:quickrun_config = {'_': { 'runner': 'vimproc', },
                                \'markdown': {
                                         \'command': 'pandoc',
                                         \  'exec': '%c --from=markdown --to=latex %o %s %a',
                                         \ },
                             \}
    nmap <Leader>r <Plug>(quickrun)
    nmap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''

[[plugins]]
repo = 'lervag/vimtex'
on_ft = ["tex"]
hook_add = '''
    let g:tex_flavor='latex'
    let g:vimtex_enabled=1
    let g:vimtex_latexmk_enabled = 1
    " let g:vimtexlatex_latexmk_options = '-pdfdvi'

    let g:latex_view_method = 'general'
    let g:vimtex_view_general_viewer='/Applications/Skim.app/Contents/SharedSupport/displayline'
    let g:vimtex_view_general_options = '-r @line @pdf @tex'

    " clientserver error を無視する
    " let g:vimtex_compiler_enable = 0
    let g:vimtex_compiler_latexmk = {
            \ 'background' : 0,
            \ 'build_dir' : '',
            \ 'continuous' : 1,
            \ 'options' : [
            \   '-pdfdvi',
            \   '-verbose',
            \   '-file-line-error',
            \   '-synctex=1',
            \   '-interaction=nonstopmode',
            \ ],
            \}
    " foward search
    "
    let g:vimtex_latexmk_callback_hooks = ['UpdateSkim']
    function! UpdateSkim(status)
        if !a:status | return | endif

        let l:out = b:vimtex.out()
        let l:tex = expand('%:p')
        let l:cmd = [g:vimtex_view_general_viewer, '-r']
        if !empty(system('pgrep Skim'))
          call extend(l:cmd, ['-g'])
        endif
        if has('nvim')
          call jobstart(l:cmd + [line('.'), l:out, l:tex])
        elseif has('job')
          call job_start(l:cmd + [line('.'), l:out, l:tex])
        else
          call system(join(l:cmd + [line('.'), shellescape(l:out), shellescape(l:tex)], ' '))
        endif
    endfunction

    let g:vimtex_fold_enabled = 1
    let g:vimtex_latexmk_callback = 1

    let g:vimtex_toc_split_pos = "topleft"
    let g:vimtex_toc_width = 10

    " for neocomplete
    if !exists('g:neocomplete#sources#omni#input_patterns')
      let g:neocomplete#sources#omni#input_patterns = {}
    endif
    let g:neocomplete#sources#omni#input_patterns.tex = '\\ref{\s*[0-9A-Za-z_:]*'
    let g:neocomplete#sources#omni#input_patterns.tex = '\\cite{\s*[0-9A-Za-z_:]*\|\\ref{\s*[0-9A-Za-z_:]*'
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'lazywei/vim-matlab'
on_ft = 'matlab'

[[plugins]]
repo = 'ujihisa/neco-look'
on_ft = 'tex'
hook_add = '''
    if !exists('g:neocomplete#text_mode_filetypes')
        let g:neocomplete#text_mode_filetypes = {}
    endif
    let g:neocomplete#text_mode_filetypes = {
            \ 'rst': 1,
            \ 'markdown': 1,
            \ 'gitrebase': 1,
            \ 'gitcommit': 1,
            \ 'vcs-commit': 1,
            \ 'hybrid': 1,
            \ 'text': 1,
            \ 'help': 1,
            \ 'tex': 1,
            \ }
'''

[[plugins]]
repo = 'tpope/vim-markdown'
on_ft = 'markdown'
hook_add = '''
    let g:previm_open_cmd = 'open -a Firefox'
'''

[[plugins]]
repo = 'vim-pandoc/vim-pandoc-syntax'
on_ft = 'markdown'

[[plugins]]
repo = 'vim-pandoc/vim-pandoc'
on_ft = 'markdown'

[[plugins]]
repo = 'kannokanno/previm'

[[plugins]]
repo = 'tyru/open-browser.vim'
